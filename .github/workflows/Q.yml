name: 优化 gh-pages 分支链接

on:
  schedule:
    # 每天凌晨 5 点运行 (在主工作流运行后)
    - cron: '0 5 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  optimize-gh-pages-links:
    runs-on: ubuntu-latest
    
    # 只需要对 gh-pages 分支有写入权限
    permissions:
      contents: write

    steps:
      - name: 检出 gh-pages 分支代码
        uses: actions/checkout@v4
        with:
          # 直接检出 gh-pages 分支
          ref: gh-pages

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖 (cheerio)
        run: npm install cheerio

      - name: 运行链接优化脚本
        run: |
          # 创建并执行 Node.js 脚本来处理链接
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const cheerio = require('cheerio');

          const directory = '.'; // 当前目录
          const blockedPrefixes = ['Special', 'File', 'User', 'MediaWiki', 'Template', 'Help', 'Category'];
          const blockedPrefixRegex = new RegExp(`^(${blockedPrefixes.join('|')}):`, 'i');
          const baseWikiUrl = 'https://en.tankiwiki.com/';
          
          let filesChanged = 0;

          console.log('开始扫描和优化HTML文件...');

          fs.readdirSync(directory).forEach(file => {
            if (path.extname(file).toLowerCase() === '.html') {
              const filePath = path.join(directory, file);
              let content = fs.readFileSync(filePath, 'utf8');
              let originalContent = content;
              
              const $ = cheerio.load(content);
              let hasChanges = false;

              $('a[href]').each((i, el) => {
                const link = $(el);
                let href = link.attr('href');
                
                if (!href) return;

                // 1. 处理 en.tankiwiki.com 的绝对链接
                if (href.startsWith(baseWikiUrl)) {
                  const pageName = href.substring(baseWikiUrl.length);
                  // 检查是否是有效页面且不在黑名单中
                  if (pageName && !pageName.includes('#') && !blockedPrefixRegex.test(pageName)) {
                    console.log(`[${file}] 转换绝对链接: ${href} -> ./${pageName}`);
                    link.attr('href', `./${pageName}`);
                    hasChanges = true;
                  }
                }
                
                // 2. 去掉内部链接的 .html 后缀
                if (href.startsWith('./') && href.endsWith('.html')) {
                  const newHref = href.slice(0, -5);
                  console.log(`[${file}] 去掉后缀: ${href} -> ${newHref}`);
                  link.attr('href', newHref);
                  hasChanges = true;
                }
              });

              if (hasChanges) {
                content = $.html();
                // 只有当内容实际发生变化时才写入文件
                if (content !== originalContent) {
                  fs.writeFileSync(filePath, content, 'utf8');
                  console.log(`✅ [${file}] 已更新。`);
                  filesChanged++;
                }
              }
            }
          });

          if (filesChanged > 0) {
            console.log(`\n优化完成！总共有 ${filesChanged} 个文件被修改。`);
          } else {
            console.log('\n扫描完成，没有需要优化的链接。');
          }
          EOF

      - name: 提交优化后的文件
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # 直接在 gh-pages 分支上提交
          branch: gh-pages
          commit_message: "chore: 优化 gh-pages 内部链接"
          # 仅当 *.html 文件有变动时才提交
          file_pattern: "*.html"
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_options: '--no-verify'
